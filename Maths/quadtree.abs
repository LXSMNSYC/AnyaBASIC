var maxQuadtrees = 8192
var qtCapacity = 4

var qtx[maxQuadtrees]
var qty[maxQuadtrees]
var qtw[maxQuadtrees]
var qth[maxQuadtrees]

var qthc[maxQuadtrees]
var qtne[maxQuadtrees]
var qtnw[maxQuadtrees]
var qtse[maxQuadtrees]
var qtsw[maxQuadtrees]

var qtpt[maxQuadtrees][qtCapacity]

var qtrec[maxQuadtrees]
qtrec[0] = 1

function newQuadtree(x, y, width, height)
start
    #
    Allocate instance
    #
    var qtnode = qtrec[0]
    if(qtrec[qtnode] == 0) then qtrec[0] = qtnode + 1
    else qtrec[0] = qtrec[qtnode]
    
    qtx[qtnode] = x
    qty[qtnode] = y
    qtw[qtnode] = width
    qth[qtnode] = height
    
    return qtnode
end

function subdivideQuadtreeNode(sqtn)
start
    if(!qthc[sqtn]) then
    start
        var hw = qtw[sqtn]/2
        var hh = qth[sqtn]/2
        var tx = qtx[sqtn]
        var ty = qty[sqtn]
        qtnw[sqtn] = newQuadTree(tx - hw, ty - hh, hw, hh)
        qtne[sqtn] = newQuadTree(tx + hw, ty - hh, hw, hh)
        qtsw[sqtn] = newQuadTree(tx - hw, ty + hh, hw, hh)
        qtse[sqtn] = newQuadTree(tx + hw, ty + hh, hw, hh)
        qthc[sqtn] = 1
    endif
end

var qtsdStack[maxQuadtrees]
var qtcur = 0 

function subdivideQuadtree(sqt)
start
    qtsdStack[0] = sqt
    while(qtsdStack[0])
    start
        qtcur = qtsdStack[0]
        if(qthc[qtcur]) then
        start
            qtsdStack[qtne[qtcur]] = qtnw[qtcur]
            qtsdStack[qtsw[qtcur]] = qtne[qtcur]
            qtsdStack[qtse[qtcur]] = qtsw[qtcur]
            qtsdStack[0] = qtse[qtcur]
        end
        else
        start
            subdivideQuadtreeNode(qtcur)
            qtsdStack[0] = qtsdStack[qtcur]
        end
    end
end
